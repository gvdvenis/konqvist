@page "/login"
@page "/login/{Password}"

@rendermode InteractiveServer

@using System.Security.Claims
@using Konqvist.Web.Core
@using Konqvist.Web.Services
@using Microsoft.AspNetCore.Authentication.Cookies

@inject NavigationManager NavigationManager
@inject MapDataStore MapDataStore
@inject SessionProvider SessionProvider
@inject GameModeRoutingService GameModeRoutingService
@inject SessionKeyProvider SessionKeyProvider
@inject IBindableHubClient GameHubClient

<div class="center-content">
    <h3 style="color:red">
        @_errorMessage
    </h3>
    <img src="icons/favicon.svg" width="60%" alt="- KONQVIST -" class="image-fit"/>
    @if (_errorMessage == "")
    {
        <h3>
            Scan QR-code to login
        </h3>
    }
</div>

@code {
    [CascadingParameter] HttpContext? HttpContext { get; set; }
    [Parameter] public string? Password { get; set; }
    private string _errorMessage = "";

    #region Overrides of ComponentBase

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Password is not null)
            await TryLogin();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        // This method handles client-side edge cases where users manually navigate to invalid routes.
        // It ensures that authenticated users are redirected to the appropriate page based on routing rules.
        if (firstRender && SessionProvider.Session.IsAuthenticated)
        {
            string? forcedRedirectRoute = await GameModeRoutingService.GetForcedRedirectRoute(NavigationManager.Uri);

            if (forcedRedirectRoute is not null)
            {
                // Redirect to the appropriate page if the current route is not allowed
                NavigationManager.NavigateTo(forcedRedirectRoute!, false, true);
            }
        }

        // Delegate routing decisions to GameModeRoutingService
    }

    #endregion

    private async Task TryLogin()
    {
        // If already logged in, do nothing
        if (SessionProvider.Session.IsAuthenticated) return;

        if (HttpContext is null || await VerifyPassword() is not { } loginuser)
        {
            _errorMessage = "Invalid credentials or already logged in";
            return;
        }

        var claims = new List<Claim>
        {
            new(ClaimTypes.Name, loginuser.Name),
            new(ClaimTypes.Role, loginuser.GameRole.ToString()),
            new(ClaimTypes.UserData, loginuser.TeamName),
            new(ClaimTypes.NameIdentifier, loginuser.TeamName),
            new("SessionVersion", SessionKeyProvider.GameInstanceKey)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        await GameHubClient.BroadcastRunnerLogin(loginuser.TeamName);
    }

    private async Task<User?> VerifyPassword()
    {
        (TeamData? teamData, TeamMemberRole role)? login =
            await MapDataStore.TryLoginTeamMember(Password);

        return login is null 
            ? null 
            : UserFromTeamDataLogin(login.Value);
    }

    private User UserFromTeamDataLogin((TeamData? teamData, TeamMemberRole role) login)
    {
        // map the login data to a user object
        return new User(
            Name: login.teamData?.Name ?? "Unknown",
            Password: Password ?? string.Empty,
            GameRole: login.role switch
            {
                TeamMemberRole.GameMaster => GameRole.GameMaster,
                TeamMemberRole.Observer => GameRole.Anonymous,
                TeamMemberRole.TeamCaptain => GameRole.TeamLeader,
                _ => GameRole.Runner
            },
            TeamName: login.teamData?.Name ?? "Unknown"
        );
    }
}
