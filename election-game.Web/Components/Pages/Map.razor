@page "/map"
@rendermode InteractiveServer
@using ElectionGame.Web.Model
@using OpenLayers.Blazor

@inject WeatherApiClient ApiClient

<div>
    <FluentButton @onclick="CenterLocation">Center to current location</FluentButton>
    <FluentButton @onclick="LoadMapDataAsync">Load Map Data</FluentButton>
    <FluentButton @onclick="HideCopsAsync">Show/Hide Cops</FluentButton>
    <FluentCheckbox Id="btninteract" @bind-Value="_enableInteractions">Interactive</FluentCheckbox>
    <pre>
        Center:@_map?.Center
        Last Position: @_lastPosition
        Mouse Position: @_mousePosition
        Visible Extent: @_map?.VisibleExtent
        Districts: @_districts
        Teams: @_teams
        @_info
    </pre>
</div>

<GameMap @ref="_map"
         @bind-Rotation="_rotation"
         @bind-Zoom="_zoom"
         @bind-Center="_center"
         OnClick="OnMapClick"
         OnPointerMove="OnPointerMove"
         OnRenderComplete="@(() => { _info = "Render complete: " + DateTime.Now.ToString("h:mm:ss.ms"); })"
         InteractionsEnabled="_enableInteractions"
         ZoomSliderControl
         FullScreenControl>
</GameMap>

@code {
    private GameMap? _map;
    private Coordinate? _mousePosition;
    private Coordinate _lastPosition;
    private Coordinate _center = new([6.261195479378347, 51.87638698662113]);
    private double _zoom = 12;
    private string _info = "";
    private string _districts = "";
    private string _teams = "";
    private double _rotation;
    private bool _enableInteractions = true;

    private async Task LoadMapDataAsync()
    {
        if (_map is null) return;
        try
        {
            string data = await ApiClient.GetMapDataAsync();
            await _map.LoadMapDataAsync(data);

            _districts = string.Join(", ", _map.Districts.Select(d => d.Name));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task OnMapClick(Coordinate coordinate)
    {
        if (_map is null) return;

        _lastPosition = coordinate;

        //_map.ClearTeams();
        await _map.AddTeam("Team Gert", coordinate);

        //_map.ClearCops();
        var cc = coordinate with { X = coordinate.X + 0.007 };
        await _map.AddCop(cc);

        _teams = _map.Teams.Select(t => t.Name).Aggregate((a, b) => a + ", " + b);
    }

    private void OnPointerMove(Coordinate coordinate)
    {
        _mousePosition = coordinate;
    }

    private Task CenterLocation()
    {
        _map?.HideCops();


        _center = new Coordinate([6.261195479378347, 51.87638698662113]);

        return Task.CompletedTask;
    }

    private Task HideCopsAsync(MouseEventArgs arg)
    {
        return _map?.HideCops() ?? Task.CompletedTask;
    }

}