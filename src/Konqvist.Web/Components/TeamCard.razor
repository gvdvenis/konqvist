@inject IBindableHubClient HubClient
@inject MapDataStore MapDataStore

@implements IDisposable

<FluentCard MinimalStyle="true" >
    <h3 class="vertically-centered center-row-content">
        @Team.Name
        @if (AllowEdit)
        {
            <FluentSpacer />
            <FluentButton IconEnd="@(new NavIcons.ArrowExit().WithColor(Color.Error))"
                          OnClick="LogoutRunner"
                          Disabled="@(!Team.RunnerLoggedIn)"
                          Title="Logout this runner"
                          />
        }
    </h3>
    <hr style="color:@(Team.RunnerLoggedIn? Team.TextColor: "#DDD"); border-width: 5px; opacity:1; border-radius: 5px;" />
    <TeamResources Enabled="@Team.RunnerLoggedIn" TeamName="@Team.Name" ShowTitle="false" AllowEdit="@AllowEdit" />
</FluentCard>

@code {
    [Parameter] public Team Team { get; set; } = Team.Empty;
    [Parameter] public bool AllowEdit { get; set; }

    private Task LogoutRunner(MouseEventArgs arg)
    {
        return HubClient.SendRunnerLogoutRequest(Team.Name);
    }

    #region Overrides of ComponentBase

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        HubClient.OnRunnerLoggedInOrOut += OnRunnerLoggedInOrOut;
    }

    private async Task OnRunnerLoggedInOrOut()
    {
        var teamData = await MapDataStore.GetTeamByName(Team.Name);

        Team = Team.CreateFromDataOrEmtpy(teamData);

        StateHasChanged();
    }

    #endregion

    #region IDisposable

    public void Dispose()
    {
        HubClient.OnRunnerLoggedInOrOut -= OnRunnerLoggedInOrOut;
    }

    #endregion

}