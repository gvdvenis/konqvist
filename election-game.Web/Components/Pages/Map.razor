@page "/"
@page "/map"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using ElectionGame.Web.Model
@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular

@implements IAsyncDisposable

@attribute [Authorize]

@inject IGeolocationService GeolocationService
@inject IToastService ToastService

<SectionContent SectionName="HeaderContentSection">
    <FluentToolbar id="toolbar-fluent-components">
        <FluentButton IconEnd="@(new Size20.MyLocation())" OnClick="CenterLocation"/>
        <FluentButton IconEnd="@(new Size20.Eye())" OnClick="@(() => _showTeams = !_showTeams)"/>
    </FluentToolbar>
</SectionContent>

<OpenStreetMap @bind-Rotation="_rotation"
               @bind-Center="_center"
               OnClick="OnMapClick"
               OnRenderComplete="@(() => _ = "for some reason this makes the popup work")"
               ZoomSliderControl
               InitialCenter="@_center"
               InitialZoom="14"
               MinZoom="14"
               MaxZoom="18"
               FullScreenControl>
    <Layers>
        <MapLayer/>
        <DistrictsLayer @ref="_districtsLayer"/>
        <TriggerCirclesLayer/>
        <TeamsLayer @ref="_teamsLayer" Visibility="_showTeams"/>
    </Layers>
    <Popup>
        <div id="popup" class="ol-box">
            @if (context is District district)
            {
                <h4>@district.Name</h4>
                <ul>
                    @foreach (var prop in district.Resources)
                    {
                        <li>@prop.Key: @prop.Value</li>
                    }
                </ul>
                <p>Owner: @district.Owner</p>
            }
        </div>
    </Popup>
</OpenStreetMap>

@code {

    [CascadingParameter] Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private Coordinate _center = new([6.261195479378347, 51.87638698662113]);
    private double _rotation;
    private DistrictsLayer? _districtsLayer;
    private Session? Session { get; set; }
    private double _watchId;
    private bool _showTeams = true;
    private TeamsLayer? _teamsLayer;

    #region Overrides of ComponentBase

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Session = await Session.CreateFromAuthenticationState(AuthenticationStateTask);

        _watchId = await GeolocationService.WatchPositionAsync(OnLocationChanged, OnLocationError, new PositionOptions()
        {
            MaximumAge = 5000,
            EnableHighAccuracy = true,
            Timeout = 10000
        });
    }

    private void OnLocationError(GeolocationPositionError positionError)
    {
        Console.WriteLine($"*** Position Error: {positionError.Message}");
        ToastService.ShowError(positionError.Message);
    }

    private void OnLocationChanged(GeolocationPosition obj)
    {
        Console.WriteLine($"*** Location received: {obj.Coords.Latitude}, {obj.Coords.Longitude}");
        //OnMapClick(new Coordinate(obj.Coords.Longitude, obj.Coords.Latitude)).ConfigureAwait(true).GetAwaiter().GetResult();
    }

    #endregion

    private async Task OnMapClick(Coordinate coordinate)
    {
        if (Session is null || _districtsLayer is null) return;
        
        await _districtsLayer.TryClaimDistrict(coordinate, Session.TeamName);

        if (_teamsLayer is not null)
            await _teamsLayer.BroadcastNewLocation(Session.TeamName, coordinate);
    }

    private Task CenterLocation()
    {
        _center = new Coordinate([6.261195479378347, 51.87638698662113]);

        ToastService.ShowInfo("Kaart gecentreerd");

        return Task.CompletedTask;
    }

    #region Implementation of IAsyncDisposable

    /// <inheritdoc />
    public async ValueTask DisposeAsync()
    {
        await GeolocationService.ClearWatchAsync(_watchId);
    }

    #endregion

}