@inject IBindableHubClient HubClient
@inject MapDataStore DataStore
@inject SessionProvider SessionProvider

<FluentStack @attributes="AdditionalAttributes" 
             HorizontalAlignment="HorizontalAlignment.Center" 
             Style="z-index:1; margin-top: -40px" 
             VerticalGap="0"
             HorizontalGap="5">
    <FluentBadge Circular="true" Class="resource-badge" Height="24px" Appearance="Appearance.Accent">
        <FluentIcon Color="Color.Fill" Class="resource-badge-icon" Value="@(new NavIcons.CoinStack())" />@nameof(Resources.Gold): @Resources.Gold
    </FluentBadge>
    <FluentBadge Circular="true" Class="resource-badge" Height="24px" Appearance="Appearance.Accent">
        <FluentIcon Color="Color.Fill" Class="resource-badge-icon" Value="@(new NavIcons.Vote())" />@nameof(Resources.Votes): @Resources.Votes
    </FluentBadge>
    <FluentBadge Circular="true" Class="resource-badge" Height="24px" Appearance="Appearance.Accent">
        <FluentIcon Color="Color.Fill" Class="resource-badge-icon" Value="@(new NavIcons.People())" />@nameof(Resources.People): @Resources.People
    </FluentBadge>
    <FluentBadge Circular="true" Class="resource-badge" Height="24px" Appearance="Appearance.Accent">
        <FluentIcon Color="Color.Fill" Class="resource-badge-icon" Value="@(new NavIcons.Drop())" />@nameof(Resources.Oil): @Resources.Oil
    </FluentBadge>
</FluentStack>

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter] public string? TeamName { get; set; }

    private Resources Resources { get; set; } = Resources.Empty;

    #region Overrides of ComponentBase

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        HubClient.OnDistrictOwnerChanged += OnDistrictOwnerChanged; ;

        TeamName ??= (await SessionProvider.SessionAsync).TeamName;

        await LoadResource();
    }

    private Task OnDistrictOwnerChanged(DistrictOwner arg)
    {
        return LoadResource();
    }

    private async Task LoadResource()
    {
        var resourcesData = await DataStore.GetResourcesForTeam(TeamName!);
        Resources = new Resources(resourcesData);
        await InvokeAsync(StateHasChanged);
    }

    #endregion

}
