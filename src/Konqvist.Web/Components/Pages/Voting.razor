@page "/voting"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IBindableHubClient HubClient
@inject SessionProvider SessionProvider
@inject MapDataStore MapDataStore
@inject NavigationManager NavigationManager

@attribute [Authorize]

<DefaultDesignTokens />

<div class="voting-container">
    @if (_initialized && !string.IsNullOrEmpty(_currentTeamName))
    {
        <div class="voting-header">
            <h4>
                So, what's at stake?
            </h4>
            <p>
                @_currentRound.Stakes
            </p>
            <p>
                Your team has <b>@_voteWeight</b> point@(_voteWeight == 1 ? "" : "s") to vote with.
            </p>
        </div>
    }
    @if (!_initialized)
    {
        <div>Loading...</div>
    }
    else
    {
        <div class="voting-content">
            @if (_initialized && !string.IsNullOrEmpty(_currentTeamName))
            {
                <div id="instructions" class="voting-instructions">
                    @if (Session.IsTeamLeader)
                    {
                        @if (_hasVoted)
                        {
                            <h5>Thank you for voting!</h5>
                        }
                        else if (!CanVote)
                        {
                            <h5>
                                Let's wait for the voting to start. 
                            </h5>
                        }
                        else
                        {
                            <h5>Cast your votes please!</h5>
                        }
                    }
                    else
                    {
                        <h5>
                            You are not allowed to vote. Only Team Leaders can cast votes
                        </h5>
                    }
                </div>
            }
            
            <div class="voting-bars">
                @foreach (var team in _teams)
                {
                    <div class="voting-team">
                        <div class="voting-bar-container">
                            <FluentBadge Style="margin-bottom: 0.5rem">@GetVotesForTeam(team.Name)</FluentBadge>
                            <div class="voting-bar" style="background: @team.Color; height: @(GetBarHeight(team.Name))px;"></div>
                        </div>
                        <FluentLabel style="margin-top: 0.5rem; font-weight: bold;">@team.Name</FluentLabel>

                        <FluentButton style="margin-top: 0.5rem;"
                                disabled="@(!CanVote || team.Name == _currentTeamName)"
                                @onclick="() => CastVote(team.Name)">
                            VOTE
                        </FluentButton>
                    </div>
                }
            </div>
        </div>
    }
</div>

@if (Session.IsTeamLeader || Session.IsAdmin)
{
    <SectionContent SectionName="FooterContentSection">
        <FluentSpacer />
        <FluentToolbar>
            @if (Session.IsAdmin)
            {
                <FluentButton IconEnd="@(new NavIcons.Map())"
                              OnClick="ShowMap"
                              Title="Show Map" />
            }
            <FluentButton IconEnd="@(new NavIcons.Organization())"
                          OnClick="ShowDashboard"
                          Title="Management Dashboard" />
        </FluentToolbar>
        <FluentSpacer />
    </SectionContent>
}

<style>
    .voting-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        overflow: hidden;
        width: 100%;
    }

    .voting-header {
        padding: 20px 20px 0 20px;
        text-align: center;
    }

    .voting-content {
        flex: 1;
        position: relative;
        display: flex;
        flex-direction: column;
        justify-content: center;
        min-height: 0;
        padding: 0 20px 20px 20px;
    }

    .voting-instructions {
        border: calc(var(--stroke-width) *1px) solid var(--warning);
        background: var(--highlight-bg);
        color: var(--info);
        border-radius: calc(var(--layer-corner-radius) * 1px);
        top: 0;
        text-align: center;
        z-index: 10;
        margin: 20px;
        min-height: 50px;
        min-width: 150px;
        padding: 5px 10px;
        align-self: center;
    }

    .voting-instructions h5 {
        margin: 5px 0;
    }

    .voting-bars {
        display: flex;
        gap: 1rem;
        justify-content: center;
        align-items: flex-end;
        flex: 1;
        min-height: 0;
    }

    .voting-team {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .voting-bar-container {
        min-height: 150px;
        width: 40px;
        display: flex;
        align-items: center;
        border-radius: 0.2rem;
        flex-direction: column;
        justify-content: flex-end;
    }

    .voting-bar {
        border-radius: 0.2rem;
        width: 100%;
        transition: height 0.3s;
    }
</style>

@code {
    private UserSession Session => SessionProvider.Session;

    private List<TeamData> _teams = [];
    private List<TeamVote> _teamVotes = [];
    private RoundData _currentRound = RoundData.Empty;
    private bool _hasVoted;
    private string? _currentTeamName;
    private int _voteWeight = 1;
    private bool _initialized;
    private bool _isVotingOpen;
    private bool CanVote => _isVotingOpen && !_hasVoted && SessionProvider.Session.GameRole == GameRole.TeamLeader;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _currentTeamName = SessionProvider.Session.TeamName;

        _teams = await MapDataStore.GetTeams(includeDisabled: false);
        _teamVotes = await MapDataStore.GetVotesForCurrentRound();
        _currentRound = MapDataStore.GetCurrentRoundData();

        // Ensure all teams are present in the votes list
        foreach (var team in _teams.Where(team => _teamVotes.All(tv => tv.TeamName != team.Name)))
        {
            _teamVotes.Add(new TeamVote(team.Name, 0));
        }

        // Get vote weight (resources) for current team
        if (!string.IsNullOrEmpty(_currentTeamName))
        {
            _voteWeight = await MapDataStore.GetVoteWeightForTeam(_currentTeamName);

            // Check if this team has already voted
            _hasVoted = await MapDataStore.HasTeamVotedInCurrentRound(_currentTeamName);
        }

        HubClient.OnTeamResourcesChanged = async (_) =>
        {
            _voteWeight = await MapDataStore.GetVoteWeightForTeam(_currentTeamName);
            await InvokeAsync(StateHasChanged);
        };

        // Subscribe to SignalR votes update
        HubClient.OnVotesUpdated = async (votes, _) =>
        {
            _teamVotes.Clear();
            foreach (var vote in votes)
            {
                _teamVotes.Add(vote);
            }
            await InvokeAsync(StateHasChanged);
        };

        HubClient.OnVotingStarted = async () =>
        {
            _isVotingOpen = true;
            await InvokeAsync(StateHasChanged);
        };

        _initialized = true;
    }

    private async Task CastVote(string teamName)
    {
        if (!CanVote || teamName == _currentTeamName) return;
        _hasVoted = true;
        await HubClient.SendCastVoteRequest(teamName, _currentTeamName!);
    }

    private int GetVotesForTeam(string teamName)
    {
        return _teamVotes.FirstOrDefault(tv => tv.TeamName == teamName)?.Amount ?? 0;
    }

    private int GetBarHeight(string teamName)
    {
        int maxVotes = _teamVotes.Select(tv => tv.Amount).DefaultIfEmpty(1).Max();
        int votes = GetVotesForTeam(teamName);

        // Scale bar height between 10 and 200px
        return 10 + (maxVotes == 0 ? 0 : (int)(190.0 * votes / maxVotes));
    }

    public void Dispose()
    {
        HubClient.OnVotesUpdated = null;
        HubClient.OnVotingStarted = null;
    }

    private void ShowDashboard() => NavigationManager.NavigateTo("/management");

    private void ShowMap() => NavigationManager.NavigateTo("/map");
}
