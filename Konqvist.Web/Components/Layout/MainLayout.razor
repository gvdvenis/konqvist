@using Microsoft.FluentUI.AspNetCore.Components.Utilities
@inherits LayoutComponentBase

@inject MapDataStore MapDataStore


<FluentLayout Orientation="Orientation.Vertical">
    <FluentHeader @ref="_fluentHeader" style="@StyleValue">
        <FluentSpacer/>
        @if (UserSession.IsAuthenticated)
        {
            <span>
                @UserSession.TeamName (@UserSession.GameRole)
            </span>
        }
        else
        {
            <span>
                - KONQVIST -
            </span>
        }
        <FluentSpacer/>
    </FluentHeader>

    <FluentBodyContent>
        @Body
    </FluentBodyContent>

    <FluentFooter>
        <SectionOutlet SectionName="FooterContentSection" @rendermode="InteractiveServer"/>
    </FluentFooter>

    <FluentDialogProvider @rendermode="InteractiveServer"/>
    <FluentToastProvider MaxToastCount="3"
    RemoveToastsOnNavigation="false"
    Position="ToastPosition.BottomCenter"
    Timeout="5000"
    @rendermode="InteractiveServer"/>
</FluentLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>


@code {
    private FluentHeader? _fluentHeader;
    private TeamData _currentTeam = TeamData.Empty;

    [CascadingParameter] Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    private UserSession UserSession { get; set; } = UserSession.Empty;

    private string? StyleValue => new StyleBuilder(_fluentHeader?.Style)
        .AddStyle("background-color", _currentTeam.Color)
        .Build();

    #region Overrides of ComponentBase

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // we should not be able to reach this page without being authorized
        ArgumentNullException.ThrowIfNull(AuthenticationStateTask);

        UserSession = await UserSession.CreateFromAuthenticationState(AuthenticationStateTask);
        _currentTeam = await MapDataStore.GetTeamByName(UserSession.TeamName) ?? TeamData.Empty;
    }

    #endregion

}