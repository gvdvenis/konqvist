@page "/management"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IBindableHubClient HubClient
@inject MapDataStore MapDataStore
@inject SessionProvider SessionProvider
@inject NavigationManager NavigationManager

@attribute [AuthorizeGameRoles(GameRole.GameMaster, GameRole.TeamLeader)]

<DefaultDesignTokens />

<div class="card-grid">
    @if (Session.IsAdmin)
    {
        <div class="full-span"
             style="
                padding: 15px; 
                border-style: solid; 
                border-color: lightgray; 
                border-width:1px; 
                border-radius: calc(var(--layer-corner-radius) * 1px); ">
            <p class="vertically-centered">
                @_currentRound.Title
                <FluentSpacer />
                <FluentButton Appearance="Appearance.Outline"
                              OnClick="NextRound"
                              Style="border-radius: 0 15px 15px 0;"
                              IconEnd="@(new NavIcons.ArrowRight())">
                    Next round
                </FluentButton>
            </p>
        </div>
    }

    @foreach (var team in _teams)
    {
        <TeamCard Team="@team" AllowEdit="@Session.IsAdmin" />
    }

    <div class="full-span"
         style="
            padding: 15px; 
            border-style: solid; 
            border-color: lightgray; 
            border-width:1px; 
            border-radius: calc(var(--layer-corner-radius) * 1px);">
        <h3 class="center-content">Scores</h3>
        <p class="vertically-centered">
            <FluentSpacer />
            @foreach (var score in _teamScores)
            {
                <FluentBadge Circular="true" Class="resource-badge" Height="24px">
                    @score.TeamName: @score.Amount
                </FluentBadge>
            }
            <FluentSpacer />
        </p>
    </div>
</div>

<SectionContent SectionName="FooterContentSection">
    <FluentSpacer />
    <FluentToolbar>
        <FluentButton IconEnd="@(new NavIcons.Map())"
                      OnClick="ShowMap"
                      Title="Show Map" />
        <FluentButton IconEnd="@(new NavIcons.SignOut())"
                      OnClick="ResetGame"
                      BackgroundColor="var(--error)"
                      Disabled="!Session.IsAdmin"
                      Title="Reset Game" />
    </FluentToolbar>
    <FluentSpacer />
</SectionContent>

@code {

    private List<Team> _teams = [];
    private List<TeamScore> _teamScores = [];
    private RoundDataStore _roundDataStore = RoundDataStore.Empty;
    private RoundData _currentRound = RoundData.Empty;
    private UserSession Session => SessionProvider.Session;
    public string TeamName { get; set; } = "";

    #region Overrides of ComponentBase

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var teamsData = await MapDataStore.GetTeams();
        _teams = teamsData.Select(Team.CreateFromDataOrEmtpy).Reverse().ToList();
        _roundDataStore = await MapDataStore.GetRoundsDataStore();
        _teamScores = await MapDataStore.GetAllTeamScores();
        _currentRound = _roundDataStore.GetCurrentRound();

        HubClient.OnRunnerLoggedInOrOut += OnRunnerLoggedInOrOut;
        HubClient.OnDistrictOwnerChanged += OnDistrictOwnerChanged;
        HubClient.OnNewRoundStarted += OnNewRoundStarted;
    }

    #endregion

    private async Task OnNewRoundStarted(RoundData roundData)
    {
        _currentRound = roundData;
        _teamScores = await MapDataStore.GetAllTeamScores();

        await InvokeAsync(StateHasChanged);
    }

    private Task OnDistrictOwnerChanged(DistrictOwner arg) => InvokeAsync(StateHasChanged);

    private async Task OnRunnerLoggedInOrOut()
    {
        var teamsData = await MapDataStore.GetTeams();
        _teams = teamsData.Select(Team.CreateFromDataOrEmtpy).Reverse().ToList();
        await InvokeAsync(StateHasChanged);
    }

    private Task NextRound(MouseEventArgs arg) => HubClient.SendStartNewRoundRequest();

    private void ShowMap(MouseEventArgs arg) => NavigationManager.NavigateTo("/map");

    private void ResetGame()
    {
        NavigationManager.NavigateTo("/resetgame");
    }

}
