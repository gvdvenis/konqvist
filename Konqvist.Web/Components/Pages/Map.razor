@page "/"
@page "/map"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular

@implements IAsyncDisposable

@attribute [Authorize]

@inject IGeolocationService GeolocationService
@inject IToastService ToastService
@inject SessionProvider SessionProvider
@inject NavigationManager NavigationManager

<FluentStack Orientation="Orientation.Vertical" VerticalGap="0">
    <OpenStreetMap @bind-Rotation="_rotation"
                   @bind-Center="_center"
                   OnClick="OnMapClick"
                   OnRenderComplete="@(() => _ = "for some reason this makes the popup work")"
                   ZoomSliderControl
                   InitialCenter="@_center"
                   InitialZoom="14"
                   MinZoom="14"
                   MaxZoom="18"
                   FullScreenControl
                   ScaleLineUnit="ScaleLineUnit.None"
                   AttributionControl="false">
        <Layers>
            <MapLayer />
            <DistrictsLayer @ref="_districtsLayer" />
            <TriggerCirclesLayer />
            <TeamsLayer @ref="_teamsLayer" Visibility="_showTeams" />
        </Layers>
        <Popup>
            <div id="popup" class="ol-box">
                @if (context is District district)
                {
                    <h4>@district.Name</h4>
                    <ul>
                        @foreach (var prop in district.ResourceDictionary)
                        {
                            <li>@prop.Key: @prop.Value</li>
                        }
                    </ul>
                    <p>Owner: @district.Owner</p>
                }
            </div>
        </Popup>
    </OpenStreetMap>
    @if (Session.IsAdmin == false)
    {
        <TeamResources Style="margin-top: -40px" />
    }
</FluentStack>

<SectionContent SectionName="FooterContentSection">
    <FluentToolbar>
        <FluentButton IconEnd="@(new Size20.MyLocation())"
                      OnClick="CenterLocation" />
        <FluentButton IconEnd="@(new Size20.Eye())"
                      OnClick="@(() => _showTeams = !_showTeams)" />
        <FluentButton IconEnd="@(new Size20.KeyReset())"
                      OnClick="ResetClaimState"
                      Disabled="!Session.IsAdmin" />
        <FluentButton IconEnd="@(new Size20.Organization())"
                      OnClick="ShowDashboard"
                      Disabled="!Session.IsAdmin" />
        <FluentButton IconEnd="@(new Size20.ArrowExit().WithColor(Color.Error))"
                      OnClick="LogoutAllRunners"
                      Appearance="Appearance.Outline"
                      Color="red"
                      Disabled="!Session.IsAdmin"
                      Title="Logout all active runners" />
    </FluentToolbar>
</SectionContent>

@code {

    private Coordinate _center = new([6.261195479378347, 51.87638698662113]);
    private double _rotation;
    private DistrictsLayer? _districtsLayer;
    private UserSession Session => SessionProvider.Session;
    private double _watchId;
    private bool _showTeams = true;
    private TeamsLayer? _teamsLayer;

    #region Overrides of ComponentBase

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _watchId = await GeolocationService.WatchPositionAsync(OnLocationChanged, OnLocationError, new PositionOptions()
            {
                MaximumAge = 5000,
                EnableHighAccuracy = true,
                Timeout = 10000
            });
    }

    private void OnLocationError(GeolocationPositionError positionError)
    {
        Console.WriteLine($"*** Position Error: {positionError.Message}");
        ToastService.ShowError(positionError.Message);
    }

    private void OnLocationChanged(GeolocationPosition obj)
    {
        Console.WriteLine($"*** Location received: {obj.Coords.Latitude}, {obj.Coords.Longitude}");
        //OnMapClick(new Coordinate(obj.Coords.Longitude, obj.Coords.Latitude)).ConfigureAwait(true).GetAwaiter().GetResult();
    }

    #endregion

    private async Task OnMapClick(Coordinate coordinate)
    {
        if (_districtsLayer is null) return;

        await _districtsLayer.TryClaimDistrict(coordinate, Session.TeamName);

        if (_teamsLayer is not null)
            await _teamsLayer.BroadcastNewLocation(Session.TeamName, coordinate);
    }

    private Task CenterLocation()
    {
        _center = new Coordinate([6.261195479378347, 51.87638698662113]);

        ToastService.ShowInfo("Kaart gecentreerd");

        return Task.CompletedTask;
    }

    private Task ResetClaimState()
    {
        return _districtsLayer?.ResetClaimState() ?? Task.CompletedTask;
    }

    private Task LogoutAllRunners(MouseEventArgs arg)
    {
        return _teamsLayer?.LogoutAllRunners() ?? Task.CompletedTask;
    }
    
    private void ShowDashboard(MouseEventArgs arg)
    {
        NavigationManager.NavigateTo("/management");
    }
    
    #region Implementation of IAsyncDisposable

    public async ValueTask DisposeAsync()
    {
        await GeolocationService.ClearWatchAsync(_watchId);
    }

    #endregion

}