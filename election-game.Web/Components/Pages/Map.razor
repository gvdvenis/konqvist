@page "/"
@page "/map"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using ElectionGame.Web.Model
@using ElectionGame.Web.State
@using OpenLayers.Blazor

@attribute [Authorize]

<div>
    <FluentButton @onclick="CenterLocation">Center to current location</FluentButton>
    @* <FluentButton @onclick="LoadMapDataAsync">Load Map Data</FluentButton> *@
    <FluentCheckbox Id="btninteract" @bind-Value="_enableInteractions">Interactive</FluentCheckbox>
    <pre>
        @* Center:@_map?.Center *@
        @* Last Position: @_lastPosition *@
        Mouse Position: @_mousePosition
        @* Visible Extent: @_map?.VisibleExtent *@
        @* Districts: @_districts *@
        @* Teams: @_teams *@
        Session Team: @Session?.TeamName
        @_info
    </pre>
</div>

<OpenStreetMap @bind-Rotation="_rotation"
               @bind-Center="_center"
               OnClick="OnMapClick"
               OnPointerMove="OnPointerMove"
               OnRenderComplete="@(() => { _info = "Render complete: " + DateTime.Now.ToString("h:mm:ss.ms"); })"
               InteractionsEnabled="_enableInteractions"
               ZoomSliderControl
               InitialCenter="@_center"
               InitialZoom="14"
               MinZoom="14"
               MaxZoom="18"
               FullScreenControl>
    <Layers>
        <MapLayer />
        <DistrictsLayer @ref="_districtsLayer" />
        <TriggerCirclesLayer />
    </Layers>
    <Popup>
        <div id="popup" class="ol-box">
            @if (context is District district)
            {
                <h4>@district.Name</h4>
                <ul>
                    @foreach (var prop in district.Resources)
                    {
                        <li>@prop.Key: @prop.Value</li>
                    }
                </ul>
                <p>Owner: Team @district.Owner</p>
            }
        </div>
    </Popup>
</OpenStreetMap>

@code {

    [CascadingParameter] Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private Coordinate? _mousePosition;
    private Coordinate _center = new([6.261195479378347, 51.87638698662113]);
    private string _info = "";
    private double _rotation;
    private bool _enableInteractions = true;
    private DistrictsLayer? _districtsLayer;
    private Session? Session { get; set; }

    #region Overrides of ComponentBase

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Session = await Session.CreateFromAuthenticationState(AuthenticationStateTask);
    }

    #endregion

    private async Task OnMapClick(Coordinate coordinate)
    {
        if (Session is not null && _districtsLayer is not null) 
            await _districtsLayer.TryClaimDistrict(coordinate, Session.TeamName);
    }

    private Task OnPointerMove(Coordinate coordinate)
    {
        _mousePosition = coordinate;
        return Task.CompletedTask;
    }

    private Task CenterLocation()
    {
        _center = new Coordinate([6.261195479378347, 51.87638698662113]);

        return Task.CompletedTask;
    }

    #region IDisposable



    #endregion

}