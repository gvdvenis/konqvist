@using Microsoft.FluentUI.AspNetCore.Components.Utilities

@inject IBindableHubClient HubClient
@inject MapDataStore DataStore
@inject SessionProvider SessionProvider
@inject IDialogService DialogService

@inherits FluentComponentBase

<div @attributes="AdditionalAttributes" style="@StyleValue;">
    <FluentStack HorizontalAlignment="HorizontalAlignment.Center"
                 VerticalGap="0"
                 HorizontalGap="2">

        <FluentBadge Circular="true" Class="resource-badge" Height="24px" Appearance="BadgeAppearance"
                     OnClick="() => ResourceClick(nameof(Resources.Gold))">
            <FluentIcon Color="Color.Fill" Class="resource-badge-icon" Value="@(new NavIcons.CoinStack())"/>
            @(ShowTitle ? $"{nameof(Resources.Gold)}:" : "") @Resources.Gold
        </FluentBadge>

        <FluentBadge Circular="true" Class="resource-badge" Height="24px" Appearance="BadgeAppearance"
                     OnClick="() => ResourceClick(nameof(Resources.Votes))">
            <FluentIcon Color="Color.Fill" Class="resource-badge-icon" Value="@(new NavIcons.Vote())"/>
            @(ShowTitle ? $"{nameof(Resources.Votes)}:" : "") @Resources.Votes
        </FluentBadge>

        <FluentBadge Circular="true" Class="resource-badge" Height="24px" Appearance="BadgeAppearance"
                     OnClick="() => ResourceClick(nameof(Resources.People))">
            <FluentIcon Color="Color.Fill" Class="resource-badge-icon" Value="@(new NavIcons.People())"/>
            @(ShowTitle ? $"{nameof(Resources.People)}:" : "") @Resources.People
        </FluentBadge>

        <FluentBadge Circular="true" Class="resource-badge" Height="24px" Appearance="BadgeAppearance"
                     OnClick="() => ResourceClick(nameof(Resources.Oil))">
            <FluentIcon Color="Color.Fill" Class="resource-badge-icon" Value="@(new NavIcons.Drop())"/>
            @(ShowTitle ? $"{nameof(Resources.Oil)}:" : "") @Resources.Oil
        </FluentBadge>
    </FluentStack>
</div>

@code {

    [Parameter] public string? TeamName { get; set; }
    [Parameter] public bool ShowTitle { get; set; } = true;
    [Parameter] public bool Enabled { get; set; } = true;

    private Resources Resources { get; set; } = Resources.Empty;

    private DialogParameters _dlgParameters = new()
    {
        Title = "Resource bonus"
    };

    protected string? StyleValue => new StyleBuilder(Style)
        .AddStyle("z-index", "1")
        .AddStyle("width", "100%")
        .Build();

    private Appearance BadgeAppearance => Enabled
        ? Appearance.Accent
        : Appearance.Neutral;

    #region Overrides of ComponentBase

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        HubClient.OnDistrictOwnerChanged += owner => LoadResource(owner.TeamName);
        HubClient.OnTeamResourcesChanged += LoadResource;

        TeamName ??= (await SessionProvider.SessionAsync).TeamName;

        await LoadResource(TeamName);
    }

    #endregion

    private async Task LoadResource(string? teamName)
    {
        if (teamName is not null && teamName != TeamName)
            return;

        var resourcesData = await DataStore.GetResourcesForTeam(TeamName!);
        Resources = new Resources(resourcesData);
        await InvokeAsync(StateHasChanged);
    }

    private async Task ResourceClick(string resourceName)
    {
        if (TeamName is null) return;
        var entryValue = string.Empty;

        var dialogInstance = await DialogService.ShowDialogAsync(@<div>
            <FluentTextField @bind-Value="@entryValue" Label="Value to add to this resource:"/>
        </div>
            , _dlgParameters);

        var result = await dialogInstance.Result;
        var additionalResources = ResourcesData.Empty;

        if (!result.Cancelled)
        {
            switch (resourceName)
            {
                case nameof(Resources.Gold):
                    additionalResources += new ResourcesData
                    {
                        R1 = int.Parse(entryValue)
                    };
                    break;
                case nameof(Resources.Votes):
                    additionalResources += new ResourcesData
                    {
                        R2 = int.Parse(entryValue)
                    };
                    break;
                case nameof(Resources.People):
                    additionalResources += new ResourcesData
                    {
                        R3 = int.Parse(entryValue)
                    };
                    break;
                case nameof(Resources.Oil):
                    additionalResources += new ResourcesData
                    {
                        R4 = int.Parse(entryValue)
                    };
                    break;
            }
        }

        await HubClient.SendSetAdditionalResourcesRequest(TeamName, additionalResources);
    }

}
