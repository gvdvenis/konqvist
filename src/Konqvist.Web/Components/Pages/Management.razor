@page "/management"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IBindableHubClient HubClient
@inject IMessageService MessageService
@inject MapDataStore MapDataStore
@inject SessionProvider SessionProvider
@inject NavigationManager NavigationManager

@attribute [AuthorizeGameRoles(GameRole.GameMaster, GameRole.TeamLeader)]

<DefaultDesignTokens />

@if (Session.IsAdmin)
{
    <div class="center-col-content" style="padding: 1rem 1rem 0 1rem; row-gap: 1rem">

        <FluentCard MinimalStyle="true"  >
            <div class="center-row-content vertically-centered">
                <h5 class="vertically-centered" >
                    @_currentRound.Title
                </h5>
                <FluentSpacer/>
                <FluentButton Appearance="Appearance.Outline"
                              OnClick="DisplayMessage"
                              Style="border-radius:15px;"
                              IconEnd="@(new NavIcons.ArrowRight())">
                    Next Round
                </FluentButton>
            </div>
            
        </FluentCard>

        @if (_currentRound.Kind == RoundKind.Voting)
        {

            <FluentCard MinimalStyle="true"  >
                <div class="center-row-content vertically-centered">
                    <h5 class="vertically-centered" >
                        @_startVotingCta
                    </h5>
                    <FluentSpacer/>
                    <FluentButton Appearance="_startVotingAppearance"
                                  OnClick="StartVoting"
                                  Title="Start Voting"
                                  Style="border-radius: 15px;"
                                  IconEnd="@(new NavIcons.Vote())">
                        Start
                    </FluentButton>
                </div>
                
            </FluentCard>
        }
    </div>
}

<div class="card-grid">

    @foreach (var team in _teams)
    {
        <TeamCard Team="@team" AllowEdit="@Session.IsAdmin" />
    }
</div>

<div class="center-col-content" style="padding: 0 1rem;">

    <FluentCard MinimalStyle="true" Class="center-col-content" >
        <h3>Scores</h3>
        <div class="center-row-content" style="column-gap: 0.5rem">
            
            @foreach (var score in _teamScores)
            {
                <FluentBadge Circular="true" Class="resource-badge" Height="24px">
                    @score.TeamName: @score.Amount
                </FluentBadge>
            }
           
        </div>
    </FluentCard>
</div>

<SectionContent SectionName="FooterContentSection">
    <FluentSpacer />
    <FluentToolbar>
        <FluentButton IconEnd="@(new NavIcons.Map())"
                      OnClick="ShowMap"
                      Title="Show Map" />

        @if (Session.IsAdmin)
        {
            <FluentButton IconEnd="@(new NavIcons.Vote())"
                          OnClick="ShowVoting"
                          Title="Show Voting" />

            <FluentButton IconEnd="@(new NavIcons.SignOut())"
                          OnClick="ResetGame"
                          BackgroundColor="var(--error)"
                          Title="Reset Game" />
        }

    </FluentToolbar>
    <FluentSpacer />
</SectionContent>

@code {

    private List<Team> _teams = [];
    private List<TeamScore> _teamScores = [];
    private RoundDataStore _roundDataStore = RoundDataStore.Empty;
    private RoundData _currentRound = RoundData.Empty;
    private UserSession Session => SessionProvider.Session;
    private Appearance _startVotingAppearance = Appearance.Accent;
    private string _startVotingCta = "Press to start voting";
    public string TeamName { get; set; } = "";

    #region Overrides of ComponentBase

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var teamsData = await MapDataStore.GetTeams();
        _teams = teamsData.Select(Team.CreateFromDataOrEmtpy).Reverse().ToList();
        _roundDataStore = await MapDataStore.GetRoundsDataStore();
        _teamScores = await MapDataStore.GetAllTeamScores();
        _currentRound = _roundDataStore.GetCurrentRound();

        HubClient.OnRunnerLoggedInOrOut += OnRunnerLoggedInOrOut;
        HubClient.OnDistrictOwnerChanged += OnDistrictOwnerChanged;
        HubClient.OnNewRoundStarted += OnNewRoundStarted;
        HubClient.OnVotingStarted += OnVotingStarted;
    }

    #endregion

    void DisplayMessage()
    {
        ActionButton<Message> nextRound = new()
        {
            Text = "YES!",
            OnClick = async _ =>
            {
                await HubClient.SendStartNewRoundRequest();
                MessageService.Clear("MESSAGES_TOP");
            }
        };

        MessageService.ShowMessageBar(options =>
        {
            options.Section = "MESSAGES_TOP";
            options.Title = "Sure to start next round?";
            options.Intent = MessageIntent.Warning;
            options.Icon = new NavIcons.PersonWarning();
            options.ClearAfterNavigation = true;
            options.PrimaryAction = nextRound;
        });
    }

    private async Task OnNewRoundStarted(RoundData roundData)
    {
        _currentRound = roundData;
        _startVotingAppearance = Appearance.Accent;
        _startVotingCta = "Press to start voting";

        _teamScores = await MapDataStore.GetAllTeamScores();

        await InvokeAsync(StateHasChanged);
    }

    private Task OnDistrictOwnerChanged(DistrictOwner arg) => InvokeAsync(StateHasChanged);

    private async Task OnRunnerLoggedInOrOut()
    {
        var teamsData = await MapDataStore.GetTeams();
        _teams = teamsData.Select(Team.CreateFromDataOrEmtpy).Reverse().ToList();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnVotingStarted()
    {
        _startVotingAppearance = Appearance.Outline;
        _startVotingCta = "Voting started";
        await InvokeAsync(StateHasChanged); 
    }

    private async Task StartVoting() => await HubClient.SendStartVotingRequest();

    private void ShowMap() => NavigationManager.NavigateTo("/map");

    private void ShowVoting() => NavigationManager.NavigateTo("/voting");

    private void ResetGame()
    {
        NavigationManager.NavigateTo("/resetgame");
    }

}
