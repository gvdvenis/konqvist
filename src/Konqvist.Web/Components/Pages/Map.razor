@page "/"
@page "/map"
@page "/maptestdisable"
@page "/maptestenable"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@using TeamResources = Konqvist.Web.Components.TeamResources

@implements IAsyncDisposable

@attribute [Authorize]

@inject IGeolocationService GeolocationService
@inject IToastService ToastService
@inject SessionProvider SessionProvider
@inject NavigationManager NavigationManager
@inject MapDataStore MapDataStore
@inject IJSRuntime JsRuntime

<DefaultDesignTokens />

@if (_context is { } district)
{
    <div id="popup" class="ol-box static-popup" @onclick="@(() => _context = null)">
        <h4>@district.Name</h4>
        @foreach (var prop in district.ResourceDictionary)
        {
            <div class="vertically-centered">
                <b>
                    <FluentIcon Color="Color.Custom"
                                CustomColor="#000"
                                Value="@(prop.Value.Icon)"
                                Style="font-weight:bolder" />
                </b>
                @prop.Key: @prop.Value.Amount
            </div>
        }
        <hr />
        <h5>Owner: @district.Owner</h5>
    </div>
}

<FluentStack Orientation="Orientation.Vertical" VerticalGap="0">
    <OpenStreetMap @ref="_map"
                   @bind-Rotation="_rotation"
                   @bind-Center="_center"
                   OnClick="OnMapClick"
                   OnShapeClick="OnShapeClick"
                   ConfigureJsMethod="mapModule.configureMap"
                   OnRenderComplete="@(() => _ = "for some reason this makes the popup work")"
                   ZoomSliderControl
                   InitialCenter="@_center"
                   InitialZoom="14"
                   MinZoom="14"
                   MaxZoom="18"
                   ScaleLineUnit="ScaleLineUnit.None"
                   AttributionControl="false">
        <Layers>
            <MapLayer />
            <DistrictsLayer @ref="_districtsLayer" />
            <TriggerCirclesLayer />
            <TeamsLayer @ref="_teamsLayer" Visibility="_showTeams" />
        </Layers>
    </OpenStreetMap>
    @if (Session.IsAdmin == false)
    {
        <TeamResources Style="margin-top: -40px" ReadOnly="true"/>
    }
</FluentStack>

<SectionContent SectionName="FooterContentSection">
    <FluentSpacer />
    <FluentToolbar>
        @if (Session.IsPlayer)
        {
            @if (_trackingEnabled)
            {
                <FluentButton IconEnd="@(new NavIcons.LocationArrow())"
                              OnClick="ToggleLocationTracking"
                              Appearance="Appearance.Accent"
                              Title="Disable Location Tracking" />
            }
            else
            {
                <FluentButton IconEnd="@(new NavIcons.LocationArrow())"
                              OnClick="ToggleLocationTracking"
                              Title="Enable Location Tracking" />
            }

            <FluentButton IconEnd="@(new NavIcons.MyLocation())"
                          OnClick="CenterLocation"
                          Title="Center map on your current location" />
        }

        <FluentButton IconEnd="@(new NavIcons.GlobeLocation())"
                      OnClick="CenterMap"
                      Title="Center on game area" />

        @if (_showTeams)
        {
            <FluentButton IconEnd="@(new NavIcons.Eye())"
                          OnClick="@(() => _showTeams = false)"
                          Title="Hide Teams" />
        }
        else
        {
            <FluentButton IconEnd="@(new NavIcons.EyeOff())"
                          OnClick="@(() => _showTeams = true)"
                          Title="Show Teams" />
        }
        @if (Session.IsAdmin)
        {
            <FluentButton IconEnd="@(new NavIcons.Vote())"
                          OnClick="ShowVoting"
                          Title="Show Voting" />
        }
        @if (AllowManagement)
        {
            <FluentButton IconEnd="@(new NavIcons.Organization())"
                          OnClick="ShowDashboard"
                          Title="Management Dashboard" />
        }
        
    </FluentToolbar>
    <FluentSpacer />
</SectionContent>

@code {
    private static readonly Coordinate DefaultCenter = new([6.261195479378347, 51.87638698662113]);
    private Coordinate _center = DefaultCenter;
    private Coordinate _lastLocation = DefaultCenter;
    private double _rotation;
    private double _watchId;
    private bool _showTeams = true;
    private bool _trackingEnabled;
    private TeamsLayer? _teamsLayer;
    private DistrictsLayer? _districtsLayer;
    private District? _context;
    private OpenStreetMap? _map;
    private UserSession Session => SessionProvider.Session;
    private bool AllowManagement => Session.IsAdmin || Session.IsTeamLeader;
    private DotNetObjectReference<Map>? _dotNetRef;
    private IJSObjectReference? _mapModule;
    private bool _isInitialized;

    #region Overrides of ComponentBase

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _mapModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "/js/mapInterop.js");
            _dotNetRef = DotNetObjectReference.Create(this);
            await _mapModule.InvokeVoidAsync("registerMapDotNetRef", _dotNetRef);
            
            // Initialize location tracking after render
            await InitializeLocationTracking();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (NavigationManager.Uri.Contains("maptestenable"))
        {
            MapDataStore.TestmodeEnabled = true;
            NavigationManager.NavigateTo("/map", false, true);
            return;
        }

        if (NavigationManager.Uri.Contains("maptestdisable"))
        {
            MapDataStore.TestmodeEnabled = false;
            NavigationManager.NavigateTo("/map", false, true);
            return;
        }

        // Set initial location from team data without JavaScript interop
        if (Session.IsPlayer)
        {
            var currentTeam = await MapDataStore.GetTeamByName(Session.TeamName);
            _lastLocation = currentTeam.Location;
        }
    }

    private async Task InitializeLocationTracking()
    {
        if (_isInitialized || !Session.IsPlayer) return;
        
        try
        {
            _watchId = await GeolocationService.WatchPositionAsync(OnLocationChanged, OnLocationError, new PositionOptions()
            {
                MaximumAge = 5000,
                EnableHighAccuracy = true,
                Timeout = 10000
            });
            _isInitialized = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to initialize location tracking: {ex.Message}");
            ToastService.ShowError("Failed to initialize location tracking");
        }
    }

    #endregion

    private void OnLocationError(GeolocationPositionError positionError)
    {
        Console.WriteLine($"*** Position Error: {positionError.Message}");
        ToastService.ShowError(positionError.Message);
    }

    private void OnLocationChanged(GeolocationPosition obj)
    {
        Console.WriteLine($"*** Location received: {obj.Coords.Latitude}, {obj.Coords.Longitude}");

        var coordinate = new Coordinate(obj.Coords.Longitude, obj.Coords.Latitude);
        UpdateLocation(coordinate).GetAwaiter().GetResult();
    }

    private void OnShapeClick(Shape shape)
    {
        if (_map is null || shape is not District district) return;
        // _context is used for popup display
        _context = district;
        // Set selection in OpenLayers via JS interop (fire-and-forget is fine here)
        _ = _mapModule?.InvokeVoidAsync("setSelectedDistrict", district.Id);
        StateHasChanged();
    }

    [JSInvokable]
    public Task InvokeShapeClickFromJs(string? districtId)
    {
        // Find the district by id and call OnShapeClick logic
        if (_districtsLayer is null || string.IsNullOrEmpty(districtId)) 
            return Task.CompletedTask;

        var district = _districtsLayer.GetDistrictById(districtId);

        if (district != null)
            OnShapeClick(district);

        return Task.CompletedTask;
    }

    private async Task OnMapClick(Coordinate coordinate)
    {
        // this should only work in test mode
        if (MapDataStore.TestmodeEnabled)
            await UpdateLocation(coordinate);
    }

    private async Task UpdateLocation(Coordinate coordinate)
    {
        if (!Session.IsPlayer) return;
        if (_districtsLayer is null) return;
        if (_teamsLayer is null) return;

        await _districtsLayer.TryClaimDistrict(coordinate, Session.TeamName);
        await _teamsLayer.BroadcastNewLocation(Session.TeamName, coordinate);
        TrackLocation(coordinate);

        _lastLocation = coordinate;
    }

    /// <summary>
    ///     Update the maps position and zoom if the current player moved
    ///     a certain distance since the last location update
    /// </summary>
    /// <returns></returns>
    private void TrackLocation(Coordinate location)
    {
        if (!_trackingEnabled) return;

        var screenCenter = new Coordinate(location.X, location.Y + 0.0012);

        _center = screenCenter;
    }

    private async Task ToggleLocationTracking()
    {
        _trackingEnabled = !_trackingEnabled;

        if (_map is null) return;

        if (_trackingEnabled)
        {
            await _map.SetZoom(17);
            TrackLocation(_lastLocation);
            return;
        }

        await _map.SetZoom(14);
    }

    private async Task CenterLocation()
    {
        if (_map == null) return;

        await _map.SetZoom(14);
        _trackingEnabled = false;
        
        var team = await MapDataStore.GetTeamByName(Session.TeamName);

        _center = team.PlayerLoggedIn
            ? team.Location
            : DefaultCenter;
    }

    private async Task CenterMap()
    {
        if (_map is null) return;

        await _map.SetZoom(14);
        _trackingEnabled = false;
        _center = DefaultCenter;
    }

    private void ShowDashboard() => NavigationManager.NavigateTo("/management");

    private void ShowVoting() => NavigationManager.NavigateTo("/voting");

    #region Implementation of IAsyncDisposable

    public async ValueTask DisposeAsync()
    {
        if (_mapModule is not null)
            await _mapModule.DisposeAsync();
        
        if (_isInitialized && _watchId > 0)
            await GeolocationService.ClearWatchAsync(_watchId);
        
        _dotNetRef?.Dispose();
    }

    #endregion
}