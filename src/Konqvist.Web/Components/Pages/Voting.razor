@page "/voting"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IBindableHubClient HubClient
@inject SessionProvider SessionProvider
@inject MapDataStore MapDataStore
@inject NavigationManager NavigationManager

@attribute [Authorize]

<DefaultDesignTokens />

<div class="center-content" style="padding: 30px;">
    @if (_initialized && !string.IsNullOrEmpty(_currentTeamName))
    {
        <h4>
            So, what's at stake?
        </h4>
        <p>
            The winner of this voting round will get a free pass to enter the toilet tent before anyone waiting in line.
        </p>
        <p>
            Your team has <b>@_voteWeight</b> point@(_voteWeight == 1 ? "" : "s") to vote with.
        </p>
    }
    @if (!_initialized)
    {
        <div>Loading...</div>
    }
    else
    {
        <div class="voting-bars" style="display: flex; gap: 2rem; justify-content: center; align-items: end; min-height: 350px;">
            @foreach (var team in _teams)
            {
                <div style="display: flex; flex-direction: column; align-items: center;">
                    <div style="height: 200px; width: 40px; display: flex; align-items: flex-end;">
                        <div style="background: @team.Color; width: 100%; height: @(GetBarHeight(team.Name))px; transition: height 0.3s;"></div>
                    </div>
                    <span style="margin-top: 0.5rem; font-weight: bold;">@team.Name</span>
                    <span style="font-size: 0.9em;">Votes: @GetVotesForTeam(team.Name)</span>

                    <button class="fluent-button" style="margin-top: 0.5rem;"
                            disabled="@(!CanVote || team.Name == _currentTeamName)"
                            @onclick="() => CastVote(team.Name)">
                        VOTE
                    </button>
                </div>
            }
        </div>
    }
    <div style="margin-top: 50px;">

        @if (_hasVoted)
        {
            <h5 style="color: green;">Thank you for voting!</h5>
        }
        else if (!CanVote)
        {
            <h5>
                Let's wait for the voting to start. You can only vote once the voting is open.
            </h5>
        }
        else
        {
            <h5>Cast your votes please!</h5>
        }

    </div>
</div>

@if (Session.IsTeamLeader)
{
    <SectionContent SectionName="FooterContentSection">
        <FluentSpacer />
        <FluentToolbar>
            @if (Session.IsAdmin)
            {
                <FluentButton IconEnd="@(new NavIcons.Map())"
                              OnClick="ShowMap"
                              Title="Show Map" />
            }
            <FluentButton IconEnd="@(new NavIcons.Organization())"
                          OnClick="ShowDashboard"
                          Title="Management Dashboard" />
        </FluentToolbar>
        <FluentSpacer />
    </SectionContent>
}

@code {

    private UserSession Session => SessionProvider.Session;
    private List<TeamData> _teams = [];
    private List<TeamVote> _teamVotes = [];
    private bool _hasVoted;
    private string? _currentTeamName;
    private int _voteWeight = 1;
    private bool _initialized;
    private bool _isVotingOpen;
    private bool CanVote => _isVotingOpen && !_hasVoted && SessionProvider.Session.GameRole == GameRole.TeamLeader;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _currentTeamName = SessionProvider.Session.TeamName;

        _teams = await MapDataStore.GetTeams(includeDisabled: false);
        _teamVotes = await MapDataStore.GetVotesForCurrentRound();

        // Ensure all teams are present in the votes list
        foreach (var team in _teams.Where(team => _teamVotes.All(tv => tv.TeamName != team.Name)))
        {
            _teamVotes.Add(new TeamVote(team.Name, 0));
        }

        // Get vote weight (resources) for current team
        if (!string.IsNullOrEmpty(_currentTeamName))
        {
            _voteWeight = await MapDataStore.GetVoteWeightForTeam(_currentTeamName);

            // Check if this team has already voted
            _hasVoted = await MapDataStore.HasTeamVotedInCurrentRound(_currentTeamName);
        }

        HubClient.OnTeamResourcesChanged = async (team) =>
        {
            _voteWeight = await MapDataStore.GetVoteWeightForTeam(team);
            await InvokeAsync(StateHasChanged);
        };

        // Subscribe to SignalR votes update
        HubClient.OnVotesUpdated = async (votes, _) =>
        {
            _teamVotes.Clear();
            foreach (var vote in votes)
            {
                _teamVotes.Add(vote);
            }
            await InvokeAsync(StateHasChanged);
        };

        HubClient.OnVotingStarted = async () =>
        {
            _isVotingOpen = true;
            await InvokeAsync(StateHasChanged);
        };

        _initialized = true;
    }

    private async Task CastVote(string teamName)
    {
        if (!CanVote || teamName == _currentTeamName) return;
        _hasVoted = true;
        await HubClient.SendCastVoteRequest(teamName, _currentTeamName!);
    }

    private int GetVotesForTeam(string teamName)
    {
        return _teamVotes.FirstOrDefault(tv => tv.TeamName == teamName)?.Amount ?? 0;
    }

    private int GetBarHeight(string teamName)
    {
        int maxVotes = _teamVotes.Select(tv => tv.Amount).DefaultIfEmpty(1).Max();
        int votes = GetVotesForTeam(teamName);

        // Scale bar height between 10 and 200px
        return 10 + (maxVotes == 0 ? 0 : (int)(190.0 * votes / maxVotes));
    }

    public void Dispose()
    {
        HubClient.OnVotesUpdated = null;
        HubClient.OnVotingStarted = null;
    }

    private void ShowDashboard() => NavigationManager.NavigateTo("/management");

    private void ShowMap() => NavigationManager.NavigateTo("/map");

}
