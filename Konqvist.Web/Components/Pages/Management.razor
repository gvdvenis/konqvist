@page "/management"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject MapDataStore MapDataStore
@inject IBindableHubClient HubClient

@attribute [AuthorizeGameRoles(GameRole.GameMaster)]

<div class="card-grid">
    <div class="full-span"
         style="background-color: darkviolet; padding:20px; border-radius: calc(var(--layer-corner-radius) * 1px);">
        @foreach (var round in _roundDataStore.Rounds)
        {
            <FluentButton Disabled="@( _currentRoundNumber >= round.Order)" OnClick="NextRound">@round.Title</FluentButton>
        }

    </div>

    @foreach (var team in _teams)
    {
        <TeamCard Team="@team" />
    }
</div>

@code {

    private IEnumerable<Team> _teams = [];
    private RoundDataStore _roundDataStore = RoundDataStore.Empty;
    private int _currentRoundNumber;

    public string TeamName { get; set; } = "";

    #region Overrides of ComponentBase

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var teamsData = await MapDataStore.GetTeams();
        _teams = teamsData.Select(Team.CreateFromDataOrEmtpy).Reverse();
        _roundDataStore = await MapDataStore.GetRounds();

        HubClient.OnRunnerLoggedInOrOut += OnRunnerLoggedInOrOut;
        HubClient.OnDistrictOwnerChanged += OnDistrictOwnerChanged;
        HubClient.OnNewRoundStarted += OnNewRoundStarted;
    }

    #endregion

    private Task OnNewRoundStarted(RoundData roundData)
    {
        _currentRoundNumber = roundData.Order;
        return InvokeAsync(StateHasChanged);
    }

    private Task OnDistrictOwnerChanged(DistrictOwner arg) => InvokeAsync(StateHasChanged);

    private Task OnRunnerLoggedInOrOut() => InvokeAsync(StateHasChanged);

    private Task NextRound(MouseEventArgs arg)
    {
        return HubClient.SendStartNewRoundRequest();
    }
}
