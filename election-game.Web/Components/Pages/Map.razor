@page "/"
@page "/map"
@rendermode InteractiveServer
@using ElectionGame.Web.Hubs
@using Microsoft.AspNetCore.SignalR.Client;
@using ElectionGame.Web.Model
@using OpenLayers.Blazor

@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject GameApiClient ApiClient

<div>
    <FluentButton @onclick="CenterLocation">Center to current location</FluentButton>
    <FluentButton @onclick="LoadMapDataAsync">Load Map Data</FluentButton>
    <FluentCheckbox Id="btninteract" @bind-Value="_enableInteractions">Interactive</FluentCheckbox>
    <pre>
        Center:@_map?.Center
        Last Position: @_lastPosition
        Mouse Position: @_mousePosition
        Visible Extent: @_map?.VisibleExtent
        Districts: @_districts
        Teams: @_teams
        @_info
    </pre>
</div>

<GameMap @ref="_map"
@bind-Rotation="_rotation"
@bind-Zoom="_zoom"
@bind-Center="_center"
OnClick="OnMapClick"
OnPointerMove="OnPointerMove"
OnRenderComplete="@(() => { _info = "Render complete: " + DateTime.Now.ToString("h:mm:ss.ms"); })"
InteractionsEnabled="_enableInteractions"
ZoomSliderControl
FullScreenControl>
</GameMap>

@code {
    private GameMap? _map;
    private Coordinate? _mousePosition;
    private Coordinate _lastPosition;
    private Coordinate _center = new([6.261195479378347, 51.87638698662113]);
    private double _zoom = 12;
    private string _info = "";
    private string _districts = "";
    private string _teams = "";
    private double _rotation;
    private bool _enableInteractions = true;
    private HubConnection? _hubConnection;
    private string? _hubUrl;
    private string _username = "Gert";

    private async Task LoadMapDataAsync()
    {
        if (_map is null) return;
        try
        {
            var data = await ApiClient.GetMapDataAsync();
            await _map.LoadMapDataAsync(data);

            _districts = string.Join(", ", _map.Districts.Select(d => d.Name));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    #region Overrides of ComponentBase

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await CreateHubClientConnection();
        }
    }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadMapDataAsync();
    }

    private async Task CreateHubClientConnection()
    {
        string baseUrl = NavigationManager.BaseUri;

        _hubUrl ??= baseUrl.TrimEnd('/') + BlazorChatSampleHub.HubUrl;

        _hubConnection ??= new HubConnectionBuilder()
            .WithUrl(_hubUrl)
            .Build();

        _hubConnection.On<string, Coordinate>(nameof(BroadcastNewLocation), OnBroadcastLocation);

        await _hubConnection.StartAsync();
    }

    private async Task OnBroadcastLocation(string userName, Coordinate coordinate)
    {
        if (_map is null) return;

        _lastPosition = coordinate;
        await _map.AddActor(coordinate, new Team("Team Gert"));

        _teams = _map.Teams
            .Select(t => t.Name)
            .Aggregate((a, b) => a + ", " + b);

        var cc = coordinate with { X = coordinate.X + 0.007 };
        await _map.AddActor(cc, new Cop());
    }

    private async Task BroadcastNewLocation(Coordinate coordinate)
    {
        if (_hubConnection != null) 
            await _hubConnection.SendAsync(nameof(BroadcastNewLocation), _username, coordinate);
    }


    #endregion

    private async Task OnMapClick(Coordinate coordinate)
    {
        await BroadcastNewLocation(coordinate);
    }

    private void OnPointerMove(Coordinate coordinate)
    {
        _mousePosition = coordinate;
    }

    private Task CenterLocation()
    {
        _center = new Coordinate([6.261195479378347, 51.87638698662113]);

        return Task.CompletedTask;
    }
}