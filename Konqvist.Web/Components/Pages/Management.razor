@page "/management"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject MapDataStore MapDataStore
@inject IBindableHubClient HubClient

@attribute [AuthorizeGameRoles(GameRole.GameMaster)]

<div class="card-grid">
    <div class="full-span"
         style="padding: 15px; border-style: solid; border-color: lightgray; border-width:1px; border-radius: calc(var(--layer-corner-radius) * 1px); ">
        <p style="display: flex; align-items: center; gap: 10px;margin-bottom:0">
            @_currentRound.Title
            <FluentButton Appearance="Appearance.Outline"
                          OnClick="NextRound"
                          Style="border-radius: 0 15px 15px 0;"
                          IconEnd="@(new NavIcons.ArrowRight())">
                Volgende Ronde
            </FluentButton>
        </p>
    </div>

    @foreach (var team in _teams)
    {
        <TeamCard Team="@team" />
    }
</div>

@code {

    private IEnumerable<Team> _teams = [];
    private RoundDataStore _roundDataStore = RoundDataStore.Empty;
    private RoundData _currentRound;

    public string TeamName { get; set; } = "";

    #region Overrides of ComponentBase

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var teamsData = await MapDataStore.GetTeams();
        _teams = teamsData.Select(Team.CreateFromDataOrEmtpy).Reverse();
        _roundDataStore = await MapDataStore.GetRounds();
        _currentRound = _roundDataStore.GetCurrentRound();
        HubClient.OnRunnerLoggedInOrOut += OnRunnerLoggedInOrOut;
        HubClient.OnDistrictOwnerChanged += OnDistrictOwnerChanged;
        HubClient.OnNewRoundStarted += OnNewRoundStarted;
    }

    #endregion

    private Task OnNewRoundStarted(RoundData roundData)
    {
        _currentRound = roundData;
        return InvokeAsync(StateHasChanged);
    }

    private Task OnDistrictOwnerChanged(DistrictOwner arg) => InvokeAsync(StateHasChanged);

    private Task OnRunnerLoggedInOrOut() => InvokeAsync(StateHasChanged);

    private Task NextRound(MouseEventArgs arg)
    {
        return HubClient.SendStartNewRoundRequest();
    }
}
