@page "/management"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject MapDataStore MapDataStore
@inject IBindableHubClient HubClient
@inject SessionProvider SessionProvider
@inject NavigationManager NavigationManager

@attribute [AuthorizeGameRoles(GameRole.GameMaster)]

<div class="card-grid">
    <div class="full-span"
         style="padding: 15px; border-style: solid; border-color: lightgray; border-width:1px; border-radius: calc(var(--layer-corner-radius) * 1px); ">
        <p class="vertically-centered">
            @_currentRound.Title
            <FluentSpacer />
            <FluentButton Appearance="Appearance.Outline"
                          OnClick="NextRound"
                          Style="border-radius: 0 15px 15px 0;"
                          IconEnd="@(new NavIcons.ArrowRight())">
                Volgende Ronde
            </FluentButton>
        </p>
    </div>

    @foreach (var team in _teams)
    {
        <TeamCard Team="@team" AllowEdit="true"/>
    }
    
    <div class="full-span"
         style="padding: 15px; border-style: solid; border-color: lightgray; border-width:1px; border-radius: calc(var(--layer-corner-radius) * 1px); ">
        <h3>Scores:</h3>
        <p class="vertically-centered">
            @foreach (var score in _teamScores)
            {
                <FluentBadge Circular="true" Class="resource-badge" Height="24px">
                    @score.TeamName: @score.Score
                </FluentBadge>
            }
        </p>
    </div>
</div>

<SectionContent SectionName="FooterContentSection">
    <FluentSpacer />
    <FluentToolbar>
        <FluentButton IconEnd="@(new NavIcons.KeyReset())"
                      OnClick="ResetClaimState"
                      Disabled="!Session.IsAdmin"
                      Title="Reset Claim State" />
        <FluentButton IconEnd="@(new NavIcons.Map())"
                      OnClick="ShowMap"
                      Disabled="!Session.IsAdmin"
                      Title="Management Dashboard" />
@*         <FluentButton IconEnd="@(new NavIcons.ArrowExit().WithColor(Color.Error))"
                      OnClick="LogoutAllRunners"
                      Appearance="Appearance.Outline"
                      Color="red"
                      Disabled="!Session.IsAdmin"
                      Title="Logout all active runners" /> *@
    </FluentToolbar>
    <FluentSpacer />
</SectionContent>

@code {

    private IEnumerable<Team> _teams = [];
    private IEnumerable<TeamScore> _teamScores = [];
    private RoundDataStore _roundDataStore = RoundDataStore.Empty;
    private RoundData _currentRound = RoundData.Empty;
    private UserSession Session => SessionProvider.Session;
    public string TeamName { get; set; } = "";

    #region Overrides of ComponentBase

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var teamsData = await MapDataStore.GetTeams();
        _teams = teamsData.Select(Team.CreateFromDataOrEmtpy).Reverse();
        _roundDataStore = await MapDataStore.GetRoundsDataStore();
        _teamScores = await MapDataStore.GetTeamScores();
        _currentRound = _roundDataStore.GetCurrentRound();

        HubClient.OnRunnerLoggedInOrOut += OnRunnerLoggedInOrOut;
        HubClient.OnDistrictOwnerChanged += OnDistrictOwnerChanged;
        HubClient.OnNewRoundStarted += OnNewRoundStarted;
    }

    #endregion

    private async Task OnNewRoundStarted(RoundData roundData)
    {
        _currentRound = roundData;
        _teamScores = await MapDataStore.GetTeamScores();

        await InvokeAsync(StateHasChanged);
    }

    private Task OnDistrictOwnerChanged(DistrictOwner arg) => InvokeAsync(StateHasChanged);

    private Task OnRunnerLoggedInOrOut() => InvokeAsync(StateHasChanged);

    private Task NextRound(MouseEventArgs arg)
    {
        return HubClient.SendStartNewRoundRequest();
    }

    private void ShowMap(MouseEventArgs arg)
    {
        NavigationManager.NavigateTo("/map");
    }

    private async Task ResetClaimState()
    {
        await MapDataStore.ClearClaims();
        await HubClient.BroadcastDistrictOwnerChange(DistrictOwner.Empty);
    }

    private async Task LogoutAllRunners(MouseEventArgs arg)
    {
        if (!Session.IsAdmin)
            return;

        await HubClient.SendRunnerLogoutRequest();
    }
}
